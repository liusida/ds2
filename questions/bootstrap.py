import matplotlib.pyplot as plt
import numpy as np

def sample(data, n):
    """ uniformly sample n datapoints from data with replacement """
    return np.random.choice(data, size=[n], replace=True)

def bootstrap(func, data, n_samples):
    ret = []
    l_data = len(data)
    for i in range(n_samples):
        bootstrap_samples = sample(data, l_data) # uniformly sample from data
        statisics = func(bootstrap_samples)
        ret.append(statisics)
    return ret

def mean(samples):
    return np.mean(samples)

def test_bootstrap_mean():
    data = np.random.random([10000]) # uniformly from 0.0 to 1.0, so mean should be 0.5

    bootstrap_mean = bootstrap(mean, data, 1000)
    plt.hist(bootstrap_mean, bins="auto")
    plt.show()

# test_bootstrap_mean()

"""
Now let's calculate the probability that whether some data are generated by a distribution or not.
"""

def is_gamma(samples):
    """ is the sample from a gamma distribution?
    return  0 if I think the distribution is not from gamma;
            1 if it is.
    
    Question: how could I write this function?
    """
    return 0

def is_normal(samples):
    """ is the sample from a normal distribution?
    return  0 if I think the distribution is not from normal;
            1 if it is.
    """
    return 0

def run_bootstrap_which_distribution():
    data_1 = np.random.gamma(shape=3.0, scale=1.0, size=[100000]) # uniformly from 0.0 to 1.0, so mean should be 0.5
    data_2 = np.random.normal(loc=0.0, scale=1.0, size=[100000]) # normal distribution,
    data = data_1 + data_2
    plt.hist(data, bins="auto")
    plt.show()

    distribution_of_being_gamma = bootstrap(is_gamma, data, 1000)
    distribution_of_being_normal = bootstrap(is_normal, data, 1000)
    
    """
    Question: now how we compare distribution_of_being_gamma and distribution_of_being_normal to make decisions?
    """

run_bootstrap_which_distribution()
